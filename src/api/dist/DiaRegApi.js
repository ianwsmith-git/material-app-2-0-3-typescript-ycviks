"use strict";
/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.9.0 (NJsonSchema v10.4.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.ApiException = exports.WeatherForecast = exports.VisitTypeArrayResponse = exports.VisitType = exports.VisitResponse = exports.VisitPagedResponse = exports.Visit = exports.StringStringKeyValuePairListResponse = exports.StringStringKeyValuePair = exports.StringResponse = exports.Response = exports.RegionArrayResponse = exports.Region = exports.PhoneNumberType = exports.PhoneNumberListResponse = exports.PhoneNumber = exports.PersonRole = exports.PersonResponse = exports.PersonPagedResponse = exports.PersonAddressResponse = exports.PersonAddressListResponse = exports.PersonAddress = exports.Person = exports.PatientSurveyStatus = exports.PatientSurveyPagedResponse = exports.PatientSurvey = exports.PatientResponse = exports.PatientPagedResponse = exports.Patient = exports.Paging = exports.LocationResponse = exports.Location = exports.ListSearch = exports.Int32Response = exports.GenderArrayResponse = exports.Gender = exports.Country = exports.ContactTypeArrayResponse = exports.ContactType = exports.ContactResponse = exports.ContactPagedResponse = exports.Contact = exports.CityListResponse = exports.CityArrayResponse = exports.City = exports.AuditInfo = exports.AddressTypeListResponse = exports.AddressType = exports.DiaRegWebApiClient = void 0;
var axios_1 = require("axios");
var defaultOptions = {
    headers: {
    // "Authorization": "",
    // 'Access-Control-Allow-Origin': '*',
    // 'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,PATCH,OPTIONS'
    }
};
var _AxiosInstance = axios_1["default"].create(defaultOptions);
var getToken = function () { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/];
    });
}); };
_AxiosInstance.interceptors.request.use(function (config) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        //let authProvider = new AuthProvider();
        //const token = await authProvider.getApiToken();
        // config.headers["Authorization"] = `Bearer ${token}`;
        return [2 /*return*/, config];
    });
}); }, function (error) {
    Promise.reject(error);
});
var DiaRegWebApiClient = /** @class */ (function () {
    function DiaRegWebApiClient() {
        this.jsonParseReviver = undefined;
        this.instance = _AxiosInstance; // instance ? instance : axios.create(defaultOptions);
        //this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
        this.baseUrl = process.env.REACT_APP_API_URL;
    }
    /**
     * @param body (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.getDoctors = function (body, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Doctors/GetDoctors";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body);
        var options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processGetDoctors(_response);
        });
    };
    DiaRegWebApiClient.prototype.processGetDoctors = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = PersonPagedResponse.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param doctorId (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.getDoctor = function (doctorId, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Doctors/GetDoctor?";
        if (doctorId === null)
            throw new Error("The parameter 'doctorId' cannot be null.");
        else if (doctorId !== undefined)
            url_ += "doctorId=" + encodeURIComponent("" + doctorId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processGetDoctor(_response);
        });
    };
    DiaRegWebApiClient.prototype.processGetDoctor = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = PersonResponse.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param doctorId (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.getDoctorLocations = function (doctorId, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Doctors/GetDoctorLocations?";
        if (doctorId === null)
            throw new Error("The parameter 'doctorId' cannot be null.");
        else if (doctorId !== undefined)
            url_ += "doctorId=" + encodeURIComponent("" + doctorId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processGetDoctorLocations(_response);
        });
    };
    DiaRegWebApiClient.prototype.processGetDoctorLocations = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = PersonAddressListResponse.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param locationId (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.getDoctorLocation = function (locationId, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Doctors/GetDoctorLocation?";
        if (locationId === null)
            throw new Error("The parameter 'locationId' cannot be null.");
        else if (locationId !== undefined)
            url_ += "locationId=" + encodeURIComponent("" + locationId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processGetDoctorLocation(_response);
        });
    };
    DiaRegWebApiClient.prototype.processGetDoctorLocation = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = PersonAddressResponse.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param body (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.updateDoctor = function (body, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Doctors/UpdateDoctor";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body);
        var options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processUpdateDoctor(_response);
        });
    };
    DiaRegWebApiClient.prototype.processUpdateDoctor = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = Response.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @return Success
     */
    DiaRegWebApiClient.prototype.newDoctor = function (cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Doctors/NewDoctor";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processNewDoctor(_response);
        });
    };
    DiaRegWebApiClient.prototype.processNewDoctor = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = PersonResponse.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param body (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.addDoctor = function (body, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Doctors/AddDoctor";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body);
        var options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processAddDoctor(_response);
        });
    };
    DiaRegWebApiClient.prototype.processAddDoctor = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = Int32Response.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param body (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.updateDoctorLocation = function (body, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Doctors/UpdateDoctorLocation";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body);
        var options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processUpdateDoctorLocation(_response);
        });
    };
    DiaRegWebApiClient.prototype.processUpdateDoctorLocation = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = Response.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param body (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.addDoctorLocation = function (body, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Doctors/AddDoctorLocation";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body);
        var options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processAddDoctorLocation(_response);
        });
    };
    DiaRegWebApiClient.prototype.processAddDoctorLocation = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = Int32Response.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param body (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.deleteDoctorLocation = function (body, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Doctors/DeleteDoctorLocation";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body);
        var options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processDeleteDoctorLocation(_response);
        });
    };
    DiaRegWebApiClient.prototype.processDeleteDoctorLocation = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = Response.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param body (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.deleteDoctor = function (body, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Doctors/DeleteDoctor";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body);
        var options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processDeleteDoctor(_response);
        });
    };
    DiaRegWebApiClient.prototype.processDeleteDoctor = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = Response.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param body (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.getPatients = function (body, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Patients/GetPatients";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body);
        var options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processGetPatients(_response);
        });
    };
    DiaRegWebApiClient.prototype.processGetPatients = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = PatientPagedResponse.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.getPatient = function (id, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Patients/GetPatient?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processGetPatient(_response);
        });
    };
    DiaRegWebApiClient.prototype.processGetPatient = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = PatientResponse.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param body (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.updatePatient = function (body, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Patients/UpdatePatient";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body);
        var options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processUpdatePatient(_response);
        });
    };
    DiaRegWebApiClient.prototype.processUpdatePatient = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = Response.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param body (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.addPatient = function (body, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Patients/AddPatient";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body);
        var options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processAddPatient(_response);
        });
    };
    DiaRegWebApiClient.prototype.processAddPatient = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = Int32Response.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.getVisits = function (id, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Patients/GetVisits?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processGetVisits(_response);
        });
    };
    DiaRegWebApiClient.prototype.processGetVisits = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = VisitPagedResponse.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.getVisit = function (id, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Patients/GetVisit?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processGetVisit(_response);
        });
    };
    DiaRegWebApiClient.prototype.processGetVisit = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = VisitResponse.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param body (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.updateVisit = function (body, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Patients/UpdateVisit";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body);
        var options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processUpdateVisit(_response);
        });
    };
    DiaRegWebApiClient.prototype.processUpdateVisit = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = Response.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param body (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.addVisit = function (body, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Patients/AddVisit";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body);
        var options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processAddVisit(_response);
        });
    };
    DiaRegWebApiClient.prototype.processAddVisit = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = Int32Response.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.getContacts = function (id, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Patients/GetContacts?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processGetContacts(_response);
        });
    };
    DiaRegWebApiClient.prototype.processGetContacts = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = ContactPagedResponse.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.getContact = function (id, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Patients/GetContact?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processGetContact(_response);
        });
    };
    DiaRegWebApiClient.prototype.processGetContact = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = ContactResponse.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param body (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.updateContact = function (body, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Patients/UpdateContact";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body);
        var options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processUpdateContact(_response);
        });
    };
    DiaRegWebApiClient.prototype.processUpdateContact = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = Response.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param body (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.addContact = function (body, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Patients/AddContact";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body);
        var options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processAddContact(_response);
        });
    };
    DiaRegWebApiClient.prototype.processAddContact = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = Int32Response.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.getPatientSurveys = function (id, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Patients/GetPatientSurveys?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processGetPatientSurveys(_response);
        });
    };
    DiaRegWebApiClient.prototype.processGetPatientSurveys = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = PatientSurveyPagedResponse.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.getPatientSurvey = function (id, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Patients/GetPatientSurvey?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processGetPatientSurvey(_response);
        });
    };
    DiaRegWebApiClient.prototype.processGetPatientSurvey = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = StringResponse.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param id (optional)
     * @param answers (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.updatePatientSurvey = function (id, answers, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Patients/UpdatePatientSurvey?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (answers === null)
            throw new Error("The parameter 'answers' cannot be null.");
        else if (answers !== undefined)
            url_ += "answers=" + encodeURIComponent("" + answers) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processUpdatePatientSurvey(_response);
        });
    };
    DiaRegWebApiClient.prototype.processUpdatePatientSurvey = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = Response.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.completePatientSurvey = function (id, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Patients/CompletePatientSurvey?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processCompletePatientSurvey(_response);
        });
    };
    DiaRegWebApiClient.prototype.processCompletePatientSurvey = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = Response.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param roleId (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.getPersons = function (roleId, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Person/GetPersons?";
        if (roleId === null)
            throw new Error("The parameter 'roleId' cannot be null.");
        else if (roleId !== undefined)
            url_ += "roleId=" + encodeURIComponent("" + roleId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processGetPersons(_response);
        });
    };
    DiaRegWebApiClient.prototype.processGetPersons = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = PersonPagedResponse.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param personId (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.getPerson = function (personId, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Person/GetPerson?";
        if (personId === null)
            throw new Error("The parameter 'personId' cannot be null.");
        else if (personId !== undefined)
            url_ += "personId=" + encodeURIComponent("" + personId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processGetPerson(_response);
        });
    };
    DiaRegWebApiClient.prototype.processGetPerson = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = PersonResponse.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param body (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.addPerson = function (body, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Person/AddPerson";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(body);
        var options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processAddPerson(_response);
        });
    };
    DiaRegWebApiClient.prototype.processAddPerson = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = Int32Response.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param personId (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.deletePerson = function (personId, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Person/DeletePerson?";
        if (personId === null)
            throw new Error("The parameter 'personId' cannot be null.");
        else if (personId !== undefined)
            url_ += "personId=" + encodeURIComponent("" + personId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processDeletePerson(_response);
        });
    };
    DiaRegWebApiClient.prototype.processDeletePerson = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = Response.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param personId (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.getPersonAddresses = function (personId, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Person/GetPersonAddresses?";
        if (personId === null)
            throw new Error("The parameter 'personId' cannot be null.");
        else if (personId !== undefined)
            url_ += "personId=" + encodeURIComponent("" + personId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processGetPersonAddresses(_response);
        });
    };
    DiaRegWebApiClient.prototype.processGetPersonAddresses = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = PersonAddressListResponse.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param personId (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.getPersonPhoneNumbers = function (personId, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Person/GetPersonPhoneNumbers?";
        if (personId === null)
            throw new Error("The parameter 'personId' cannot be null.");
        else if (personId !== undefined)
            url_ += "personId=" + encodeURIComponent("" + personId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processGetPersonPhoneNumbers(_response);
        });
    };
    DiaRegWebApiClient.prototype.processGetPersonPhoneNumbers = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = PhoneNumberListResponse.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @return Success
     */
    DiaRegWebApiClient.prototype.getPatientsConfiguration = function (cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/UIHelper/GetPatientsConfiguration";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processGetPatientsConfiguration(_response);
        });
    };
    DiaRegWebApiClient.prototype.processGetPatientsConfiguration = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = StringStringKeyValuePairListResponse.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @return Success
     */
    DiaRegWebApiClient.prototype.getDoctorsGridConfiguration = function (cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/UIHelper/GetDoctorsGridConfiguration";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processGetDoctorsGridConfiguration(_response);
        });
    };
    DiaRegWebApiClient.prototype.processGetDoctorsGridConfiguration = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = StringStringKeyValuePairListResponse.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @return Success
     */
    DiaRegWebApiClient.prototype.getPatientGridConfiguration = function (cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/UIHelper/GetPatientGridConfiguration";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processGetPatientGridConfiguration(_response);
        });
    };
    DiaRegWebApiClient.prototype.processGetPatientGridConfiguration = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = StringStringKeyValuePairListResponse.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param name (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.searchLocationByCityName = function (name, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/UIHelper/SearchLocationByCityName?";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processSearchLocationByCityName(_response);
        });
    };
    DiaRegWebApiClient.prototype.processSearchLocationByCityName = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = CityListResponse.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @return Success
     */
    DiaRegWebApiClient.prototype.getGenders = function (cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Values/GetGenders";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processGetGenders(_response);
        });
    };
    DiaRegWebApiClient.prototype.processGetGenders = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = GenderArrayResponse.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @return Success
     */
    DiaRegWebApiClient.prototype.getRegions = function (cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Values/GetRegions";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processGetRegions(_response);
        });
    };
    DiaRegWebApiClient.prototype.processGetRegions = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = RegionArrayResponse.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param regionId (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.getCities = function (regionId, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Values/GetCities?";
        if (regionId === null)
            throw new Error("The parameter 'regionId' cannot be null.");
        else if (regionId !== undefined)
            url_ += "regionId=" + encodeURIComponent("" + regionId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processGetCities(_response);
        });
    };
    DiaRegWebApiClient.prototype.processGetCities = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = CityArrayResponse.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @return Success
     */
    DiaRegWebApiClient.prototype.getAddressTypes = function (cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Values/GetAddressTypes";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processGetAddressTypes(_response);
        });
    };
    DiaRegWebApiClient.prototype.processGetAddressTypes = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = AddressTypeListResponse.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @return Success
     */
    DiaRegWebApiClient.prototype.getVisitTypes = function (cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Values/GetVisitTypes";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processGetVisitTypes(_response);
        });
    };
    DiaRegWebApiClient.prototype.processGetVisitTypes = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = VisitTypeArrayResponse.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @return Success
     */
    DiaRegWebApiClient.prototype.getPatientContactTypes = function (cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Values/GetPatientContactTypes";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processGetPatientContactTypes(_response);
        });
    };
    DiaRegWebApiClient.prototype.processGetPatientContactTypes = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = ContactTypeArrayResponse.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @param cityId (optional)
     * @return Success
     */
    DiaRegWebApiClient.prototype.getLocationByCityId = function (cityId, cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Values/GetLocationByCityId?";
        if (cityId === null)
            throw new Error("The parameter 'cityId' cannot be null.");
        else if (cityId !== undefined)
            url_ += "cityId=" + encodeURIComponent("" + cityId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processGetLocationByCityId(_response);
        });
    };
    DiaRegWebApiClient.prototype.processGetLocationByCityId = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = LocationResponse.fromJS(resultData200);
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * @return Success
     */
    DiaRegWebApiClient.prototype.weatherForecast = function (cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processWeatherForecast(_response);
        });
    };
    DiaRegWebApiClient.prototype.processWeatherForecast = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [];
                for (var _i = 0, resultData200_1 = resultData200; _i < resultData200_1.length; _i++) {
                    var item = resultData200_1[_i];
                    result200.push(WeatherForecast.fromJS(item));
                }
            }
            else {
                result200 = null;
            }
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    return DiaRegWebApiClient;
}());
exports.DiaRegWebApiClient = DiaRegWebApiClient;
var AddressType = /** @class */ (function () {
    function AddressType(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AddressType.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : null;
            this.name = _data["name"] !== undefined ? _data["name"] : null;
            this.active = _data["active"] !== undefined ? _data["active"] : null;
        }
    };
    AddressType.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AddressType();
        result.init(data);
        return result;
    };
    AddressType.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["active"] = this.active !== undefined ? this.active : null;
        return data;
    };
    return AddressType;
}());
exports.AddressType = AddressType;
var AddressTypeListResponse = /** @class */ (function () {
    function AddressTypeListResponse(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AddressTypeListResponse.prototype.init = function (_data) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : null;
            this.message = _data["message"] !== undefined ? _data["message"] : null;
            if (Array.isArray(_data["data"])) {
                this.data = [];
                for (var _i = 0, _a = _data["data"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.data.push(AddressType.fromJS(item));
                }
            }
            else {
                this.data = null;
            }
        }
    };
    AddressTypeListResponse.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AddressTypeListResponse();
        result.init(data);
        return result;
    };
    AddressTypeListResponse.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status !== undefined ? this.status : null;
        data["message"] = this.message !== undefined ? this.message : null;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (var _i = 0, _a = this.data; _i < _a.length; _i++) {
                var item = _a[_i];
                data["data"].push(item.toJSON());
            }
        }
        return data;
    };
    return AddressTypeListResponse;
}());
exports.AddressTypeListResponse = AddressTypeListResponse;
var AuditInfo = /** @class */ (function () {
    function AuditInfo(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AuditInfo.prototype.init = function (_data) {
        if (_data) {
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : null;
            this.createdBy = _data["createdBy"] !== undefined ? _data["createdBy"] : null;
            this.lastUpdateDate = _data["lastUpdateDate"] ? new Date(_data["lastUpdateDate"].toString()) : null;
            this.lastUpdatedBy = _data["lastUpdatedBy"] !== undefined ? _data["lastUpdatedBy"] : null;
            this.deletedDate = _data["deletedDate"] ? new Date(_data["deletedDate"].toString()) : null;
            this.deletedBy = _data["deletedBy"] !== undefined ? _data["deletedBy"] : null;
            this.deleted = _data["deleted"] !== undefined ? _data["deleted"] : null;
        }
    };
    AuditInfo.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AuditInfo();
        result.init(data);
        return result;
    };
    AuditInfo.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : null;
        data["createdBy"] = this.createdBy !== undefined ? this.createdBy : null;
        data["lastUpdateDate"] = this.lastUpdateDate ? this.lastUpdateDate.toISOString() : null;
        data["lastUpdatedBy"] = this.lastUpdatedBy !== undefined ? this.lastUpdatedBy : null;
        data["deletedDate"] = this.deletedDate ? this.deletedDate.toISOString() : null;
        data["deletedBy"] = this.deletedBy !== undefined ? this.deletedBy : null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : null;
        return data;
    };
    return AuditInfo;
}());
exports.AuditInfo = AuditInfo;
var City = /** @class */ (function () {
    function City(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    City.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : null;
            this.name = _data["name"] !== undefined ? _data["name"] : null;
            this.active = _data["active"] !== undefined ? _data["active"] : null;
            this.regionId = _data["regionId"] !== undefined ? _data["regionId"] : null;
        }
    };
    City.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new City();
        result.init(data);
        return result;
    };
    City.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["active"] = this.active !== undefined ? this.active : null;
        data["regionId"] = this.regionId !== undefined ? this.regionId : null;
        return data;
    };
    return City;
}());
exports.City = City;
var CityArrayResponse = /** @class */ (function () {
    function CityArrayResponse(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CityArrayResponse.prototype.init = function (_data) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : null;
            this.message = _data["message"] !== undefined ? _data["message"] : null;
            if (Array.isArray(_data["data"])) {
                this.data = [];
                for (var _i = 0, _a = _data["data"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.data.push(City.fromJS(item));
                }
            }
            else {
                this.data = null;
            }
        }
    };
    CityArrayResponse.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CityArrayResponse();
        result.init(data);
        return result;
    };
    CityArrayResponse.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status !== undefined ? this.status : null;
        data["message"] = this.message !== undefined ? this.message : null;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (var _i = 0, _a = this.data; _i < _a.length; _i++) {
                var item = _a[_i];
                data["data"].push(item.toJSON());
            }
        }
        return data;
    };
    return CityArrayResponse;
}());
exports.CityArrayResponse = CityArrayResponse;
var CityListResponse = /** @class */ (function () {
    function CityListResponse(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CityListResponse.prototype.init = function (_data) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : null;
            this.message = _data["message"] !== undefined ? _data["message"] : null;
            if (Array.isArray(_data["data"])) {
                this.data = [];
                for (var _i = 0, _a = _data["data"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.data.push(City.fromJS(item));
                }
            }
            else {
                this.data = null;
            }
        }
    };
    CityListResponse.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CityListResponse();
        result.init(data);
        return result;
    };
    CityListResponse.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status !== undefined ? this.status : null;
        data["message"] = this.message !== undefined ? this.message : null;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (var _i = 0, _a = this.data; _i < _a.length; _i++) {
                var item = _a[_i];
                data["data"].push(item.toJSON());
            }
        }
        return data;
    };
    return CityListResponse;
}());
exports.CityListResponse = CityListResponse;
var Contact = /** @class */ (function () {
    function Contact(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Contact.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : null;
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : null;
            this.emailAddress = _data["emailAddress"] !== undefined ? _data["emailAddress"] : null;
            this.location = _data["location"] ? Location.fromJS(_data["location"]) : null;
            this.middleName = _data["middleName"] !== undefined ? _data["middleName"] : null;
            this.address1 = _data["address1"] !== undefined ? _data["address1"] : null;
            this.address2 = _data["address2"] !== undefined ? _data["address2"] : null;
            this.title = _data["title"] !== undefined ? _data["title"] : null;
            this.suffix = _data["suffix"] !== undefined ? _data["suffix"] : null;
            this.cellPhone = _data["cellPhone"] !== undefined ? _data["cellPhone"] : null;
            this.homePhone = _data["homePhone"] !== undefined ? _data["homePhone"] : null;
            this.gender = _data["gender"] ? Gender.fromJS(_data["gender"]) : null;
            this.active = _data["active"] !== undefined ? _data["active"] : null;
            this.patientId = _data["patientId"] !== undefined ? _data["patientId"] : null;
            this.contactType = _data["contactType"] ? ContactType.fromJS(_data["contactType"]) : null;
            this.contactTypeId = _data["contactTypeId"] !== undefined ? _data["contactTypeId"] : null;
            this.otherContact = _data["otherContact"] !== undefined ? _data["otherContact"] : null;
        }
    };
    Contact.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Contact();
        result.init(data);
        return result;
    };
    Contact.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        data["location"] = this.location ? this.location.toJSON() : null;
        data["middleName"] = this.middleName !== undefined ? this.middleName : null;
        data["address1"] = this.address1 !== undefined ? this.address1 : null;
        data["address2"] = this.address2 !== undefined ? this.address2 : null;
        data["title"] = this.title !== undefined ? this.title : null;
        data["suffix"] = this.suffix !== undefined ? this.suffix : null;
        data["cellPhone"] = this.cellPhone !== undefined ? this.cellPhone : null;
        data["homePhone"] = this.homePhone !== undefined ? this.homePhone : null;
        data["gender"] = this.gender ? this.gender.toJSON() : null;
        data["active"] = this.active !== undefined ? this.active : null;
        data["patientId"] = this.patientId !== undefined ? this.patientId : null;
        data["contactType"] = this.contactType ? this.contactType.toJSON() : null;
        data["contactTypeId"] = this.contactTypeId !== undefined ? this.contactTypeId : null;
        data["otherContact"] = this.otherContact !== undefined ? this.otherContact : null;
        return data;
    };
    return Contact;
}());
exports.Contact = Contact;
var ContactPagedResponse = /** @class */ (function () {
    function ContactPagedResponse(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ContactPagedResponse.prototype.init = function (_data) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : null;
            this.message = _data["message"] !== undefined ? _data["message"] : null;
            this.currentPage = _data["currentPage"] !== undefined ? _data["currentPage"] : null;
            this.pageCount = _data["pageCount"] !== undefined ? _data["pageCount"] : null;
            this.pageSize = _data["pageSize"] !== undefined ? _data["pageSize"] : null;
            this.rowCount = _data["rowCount"] !== undefined ? _data["rowCount"] : null;
            if (Array.isArray(_data["data"])) {
                this.data = [];
                for (var _i = 0, _a = _data["data"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.data.push(Contact.fromJS(item));
                }
            }
            else {
                this.data = null;
            }
        }
    };
    ContactPagedResponse.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ContactPagedResponse();
        result.init(data);
        return result;
    };
    ContactPagedResponse.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status !== undefined ? this.status : null;
        data["message"] = this.message !== undefined ? this.message : null;
        data["currentPage"] = this.currentPage !== undefined ? this.currentPage : null;
        data["pageCount"] = this.pageCount !== undefined ? this.pageCount : null;
        data["pageSize"] = this.pageSize !== undefined ? this.pageSize : null;
        data["rowCount"] = this.rowCount !== undefined ? this.rowCount : null;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (var _i = 0, _a = this.data; _i < _a.length; _i++) {
                var item = _a[_i];
                data["data"].push(item.toJSON());
            }
        }
        return data;
    };
    return ContactPagedResponse;
}());
exports.ContactPagedResponse = ContactPagedResponse;
var ContactResponse = /** @class */ (function () {
    function ContactResponse(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ContactResponse.prototype.init = function (_data) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : null;
            this.message = _data["message"] !== undefined ? _data["message"] : null;
            this.data = _data["data"] ? Contact.fromJS(_data["data"]) : null;
        }
    };
    ContactResponse.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ContactResponse();
        result.init(data);
        return result;
    };
    ContactResponse.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status !== undefined ? this.status : null;
        data["message"] = this.message !== undefined ? this.message : null;
        data["data"] = this.data ? this.data.toJSON() : null;
        return data;
    };
    return ContactResponse;
}());
exports.ContactResponse = ContactResponse;
var ContactType = /** @class */ (function () {
    function ContactType(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ContactType.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : null;
            this.name = _data["name"] !== undefined ? _data["name"] : null;
            this.active = _data["active"] !== undefined ? _data["active"] : null;
        }
    };
    ContactType.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ContactType();
        result.init(data);
        return result;
    };
    ContactType.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["active"] = this.active !== undefined ? this.active : null;
        return data;
    };
    return ContactType;
}());
exports.ContactType = ContactType;
var ContactTypeArrayResponse = /** @class */ (function () {
    function ContactTypeArrayResponse(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ContactTypeArrayResponse.prototype.init = function (_data) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : null;
            this.message = _data["message"] !== undefined ? _data["message"] : null;
            if (Array.isArray(_data["data"])) {
                this.data = [];
                for (var _i = 0, _a = _data["data"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.data.push(ContactType.fromJS(item));
                }
            }
            else {
                this.data = null;
            }
        }
    };
    ContactTypeArrayResponse.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ContactTypeArrayResponse();
        result.init(data);
        return result;
    };
    ContactTypeArrayResponse.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status !== undefined ? this.status : null;
        data["message"] = this.message !== undefined ? this.message : null;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (var _i = 0, _a = this.data; _i < _a.length; _i++) {
                var item = _a[_i];
                data["data"].push(item.toJSON());
            }
        }
        return data;
    };
    return ContactTypeArrayResponse;
}());
exports.ContactTypeArrayResponse = ContactTypeArrayResponse;
var Country = /** @class */ (function () {
    function Country(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Country.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : null;
            this.name = _data["name"] !== undefined ? _data["name"] : null;
            this.active = _data["active"] !== undefined ? _data["active"] : null;
        }
    };
    Country.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Country();
        result.init(data);
        return result;
    };
    Country.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["active"] = this.active !== undefined ? this.active : null;
        return data;
    };
    return Country;
}());
exports.Country = Country;
var Gender = /** @class */ (function () {
    function Gender(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Gender.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : null;
            this.name = _data["name"] !== undefined ? _data["name"] : null;
            this.active = _data["active"] !== undefined ? _data["active"] : null;
        }
    };
    Gender.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Gender();
        result.init(data);
        return result;
    };
    Gender.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["active"] = this.active !== undefined ? this.active : null;
        return data;
    };
    return Gender;
}());
exports.Gender = Gender;
var GenderArrayResponse = /** @class */ (function () {
    function GenderArrayResponse(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GenderArrayResponse.prototype.init = function (_data) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : null;
            this.message = _data["message"] !== undefined ? _data["message"] : null;
            if (Array.isArray(_data["data"])) {
                this.data = [];
                for (var _i = 0, _a = _data["data"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.data.push(Gender.fromJS(item));
                }
            }
            else {
                this.data = null;
            }
        }
    };
    GenderArrayResponse.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GenderArrayResponse();
        result.init(data);
        return result;
    };
    GenderArrayResponse.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status !== undefined ? this.status : null;
        data["message"] = this.message !== undefined ? this.message : null;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (var _i = 0, _a = this.data; _i < _a.length; _i++) {
                var item = _a[_i];
                data["data"].push(item.toJSON());
            }
        }
        return data;
    };
    return GenderArrayResponse;
}());
exports.GenderArrayResponse = GenderArrayResponse;
var Int32Response = /** @class */ (function () {
    function Int32Response(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Int32Response.prototype.init = function (_data) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : null;
            this.message = _data["message"] !== undefined ? _data["message"] : null;
            this.data = _data["data"] !== undefined ? _data["data"] : null;
        }
    };
    Int32Response.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Int32Response();
        result.init(data);
        return result;
    };
    Int32Response.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status !== undefined ? this.status : null;
        data["message"] = this.message !== undefined ? this.message : null;
        data["data"] = this.data !== undefined ? this.data : null;
        return data;
    };
    return Int32Response;
}());
exports.Int32Response = Int32Response;
var ListSearch = /** @class */ (function () {
    function ListSearch(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ListSearch.prototype.init = function (_data) {
        if (_data) {
            this.criteria = _data["criteria"] !== undefined ? _data["criteria"] : null;
            this.paging = _data["paging"] ? Paging.fromJS(_data["paging"]) : null;
            this.sort = _data["sort"] !== undefined ? _data["sort"] : null;
        }
    };
    ListSearch.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ListSearch();
        result.init(data);
        return result;
    };
    ListSearch.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["criteria"] = this.criteria !== undefined ? this.criteria : null;
        data["paging"] = this.paging ? this.paging.toJSON() : null;
        data["sort"] = this.sort !== undefined ? this.sort : null;
        return data;
    };
    return ListSearch;
}());
exports.ListSearch = ListSearch;
var Location = /** @class */ (function () {
    function Location(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Location.prototype.init = function (_data) {
        if (_data) {
            this.city = _data["city"] ? City.fromJS(_data["city"]) : null;
            this.region = _data["region"] ? Region.fromJS(_data["region"]) : null;
            this.country = _data["country"] ? Country.fromJS(_data["country"]) : null;
        }
    };
    Location.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Location();
        result.init(data);
        return result;
    };
    Location.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["city"] = this.city ? this.city.toJSON() : null;
        data["region"] = this.region ? this.region.toJSON() : null;
        data["country"] = this.country ? this.country.toJSON() : null;
        return data;
    };
    return Location;
}());
exports.Location = Location;
var LocationResponse = /** @class */ (function () {
    function LocationResponse(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    LocationResponse.prototype.init = function (_data) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : null;
            this.message = _data["message"] !== undefined ? _data["message"] : null;
            this.data = _data["data"] ? Location.fromJS(_data["data"]) : null;
        }
    };
    LocationResponse.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new LocationResponse();
        result.init(data);
        return result;
    };
    LocationResponse.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status !== undefined ? this.status : null;
        data["message"] = this.message !== undefined ? this.message : null;
        data["data"] = this.data ? this.data.toJSON() : null;
        return data;
    };
    return LocationResponse;
}());
exports.LocationResponse = LocationResponse;
var Paging = /** @class */ (function () {
    function Paging(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Paging.prototype.init = function (_data) {
        if (_data) {
            this.pageSize = _data["pageSize"] !== undefined ? _data["pageSize"] : null;
            this.pageIndex = _data["pageIndex"] !== undefined ? _data["pageIndex"] : null;
        }
    };
    Paging.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Paging();
        result.init(data);
        return result;
    };
    Paging.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["pageSize"] = this.pageSize !== undefined ? this.pageSize : null;
        data["pageIndex"] = this.pageIndex !== undefined ? this.pageIndex : null;
        return data;
    };
    return Paging;
}());
exports.Paging = Paging;
var Patient = /** @class */ (function () {
    function Patient(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Patient.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : null;
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : null;
            this.emailAddress = _data["emailAddress"] !== undefined ? _data["emailAddress"] : null;
            this.location = _data["location"] ? Location.fromJS(_data["location"]) : null;
            this.middleName = _data["middleName"] !== undefined ? _data["middleName"] : null;
            this.address1 = _data["address1"] !== undefined ? _data["address1"] : null;
            this.address2 = _data["address2"] !== undefined ? _data["address2"] : null;
            this.title = _data["title"] !== undefined ? _data["title"] : null;
            this.suffix = _data["suffix"] !== undefined ? _data["suffix"] : null;
            this.cellPhone = _data["cellPhone"] !== undefined ? _data["cellPhone"] : null;
            this.homePhone = _data["homePhone"] !== undefined ? _data["homePhone"] : null;
            this.active = _data["active"] !== undefined ? _data["active"] : null;
            this.birthDate = _data["birthDate"] ? new Date(_data["birthDate"].toString()) : null;
            this.gender = _data["gender"] ? Gender.fromJS(_data["gender"]) : null;
        }
    };
    Patient.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Patient();
        result.init(data);
        return result;
    };
    Patient.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        data["location"] = this.location ? this.location.toJSON() : null;
        data["middleName"] = this.middleName !== undefined ? this.middleName : null;
        data["address1"] = this.address1 !== undefined ? this.address1 : null;
        data["address2"] = this.address2 !== undefined ? this.address2 : null;
        data["title"] = this.title !== undefined ? this.title : null;
        data["suffix"] = this.suffix !== undefined ? this.suffix : null;
        data["cellPhone"] = this.cellPhone !== undefined ? this.cellPhone : null;
        data["homePhone"] = this.homePhone !== undefined ? this.homePhone : null;
        data["active"] = this.active !== undefined ? this.active : null;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : null;
        data["gender"] = this.gender ? this.gender.toJSON() : null;
        return data;
    };
    return Patient;
}());
exports.Patient = Patient;
var PatientPagedResponse = /** @class */ (function () {
    function PatientPagedResponse(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PatientPagedResponse.prototype.init = function (_data) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : null;
            this.message = _data["message"] !== undefined ? _data["message"] : null;
            this.currentPage = _data["currentPage"] !== undefined ? _data["currentPage"] : null;
            this.pageCount = _data["pageCount"] !== undefined ? _data["pageCount"] : null;
            this.pageSize = _data["pageSize"] !== undefined ? _data["pageSize"] : null;
            this.rowCount = _data["rowCount"] !== undefined ? _data["rowCount"] : null;
            if (Array.isArray(_data["data"])) {
                this.data = [];
                for (var _i = 0, _a = _data["data"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.data.push(Patient.fromJS(item));
                }
            }
            else {
                this.data = null;
            }
        }
    };
    PatientPagedResponse.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PatientPagedResponse();
        result.init(data);
        return result;
    };
    PatientPagedResponse.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status !== undefined ? this.status : null;
        data["message"] = this.message !== undefined ? this.message : null;
        data["currentPage"] = this.currentPage !== undefined ? this.currentPage : null;
        data["pageCount"] = this.pageCount !== undefined ? this.pageCount : null;
        data["pageSize"] = this.pageSize !== undefined ? this.pageSize : null;
        data["rowCount"] = this.rowCount !== undefined ? this.rowCount : null;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (var _i = 0, _a = this.data; _i < _a.length; _i++) {
                var item = _a[_i];
                data["data"].push(item.toJSON());
            }
        }
        return data;
    };
    return PatientPagedResponse;
}());
exports.PatientPagedResponse = PatientPagedResponse;
var PatientResponse = /** @class */ (function () {
    function PatientResponse(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PatientResponse.prototype.init = function (_data) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : null;
            this.message = _data["message"] !== undefined ? _data["message"] : null;
            this.data = _data["data"] ? Patient.fromJS(_data["data"]) : null;
        }
    };
    PatientResponse.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PatientResponse();
        result.init(data);
        return result;
    };
    PatientResponse.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status !== undefined ? this.status : null;
        data["message"] = this.message !== undefined ? this.message : null;
        data["data"] = this.data ? this.data.toJSON() : null;
        return data;
    };
    return PatientResponse;
}());
exports.PatientResponse = PatientResponse;
var PatientSurvey = /** @class */ (function () {
    function PatientSurvey(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PatientSurvey.prototype.init = function (_data) {
        if (_data) {
            this.patientSurveyId = _data["patientSurveyId"] !== undefined ? _data["patientSurveyId"] : null;
            this.surveyName = _data["surveyName"] !== undefined ? _data["surveyName"] : null;
            this.dateAssigned = _data["dateAssigned"] ? new Date(_data["dateAssigned"].toString()) : null;
            this.completedDate = _data["completedDate"] ? new Date(_data["completedDate"].toString()) : null;
            this.completedBy = _data["completedBy"] !== undefined ? _data["completedBy"] : null;
            this.status = _data["status"] ? PatientSurveyStatus.fromJS(_data["status"]) : null;
        }
    };
    PatientSurvey.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PatientSurvey();
        result.init(data);
        return result;
    };
    PatientSurvey.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["patientSurveyId"] = this.patientSurveyId !== undefined ? this.patientSurveyId : null;
        data["surveyName"] = this.surveyName !== undefined ? this.surveyName : null;
        data["dateAssigned"] = this.dateAssigned ? this.dateAssigned.toISOString() : null;
        data["completedDate"] = this.completedDate ? this.completedDate.toISOString() : null;
        data["completedBy"] = this.completedBy !== undefined ? this.completedBy : null;
        data["status"] = this.status ? this.status.toJSON() : null;
        return data;
    };
    return PatientSurvey;
}());
exports.PatientSurvey = PatientSurvey;
var PatientSurveyPagedResponse = /** @class */ (function () {
    function PatientSurveyPagedResponse(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PatientSurveyPagedResponse.prototype.init = function (_data) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : null;
            this.message = _data["message"] !== undefined ? _data["message"] : null;
            this.currentPage = _data["currentPage"] !== undefined ? _data["currentPage"] : null;
            this.pageCount = _data["pageCount"] !== undefined ? _data["pageCount"] : null;
            this.pageSize = _data["pageSize"] !== undefined ? _data["pageSize"] : null;
            this.rowCount = _data["rowCount"] !== undefined ? _data["rowCount"] : null;
            if (Array.isArray(_data["data"])) {
                this.data = [];
                for (var _i = 0, _a = _data["data"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.data.push(PatientSurvey.fromJS(item));
                }
            }
            else {
                this.data = null;
            }
        }
    };
    PatientSurveyPagedResponse.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PatientSurveyPagedResponse();
        result.init(data);
        return result;
    };
    PatientSurveyPagedResponse.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status !== undefined ? this.status : null;
        data["message"] = this.message !== undefined ? this.message : null;
        data["currentPage"] = this.currentPage !== undefined ? this.currentPage : null;
        data["pageCount"] = this.pageCount !== undefined ? this.pageCount : null;
        data["pageSize"] = this.pageSize !== undefined ? this.pageSize : null;
        data["rowCount"] = this.rowCount !== undefined ? this.rowCount : null;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (var _i = 0, _a = this.data; _i < _a.length; _i++) {
                var item = _a[_i];
                data["data"].push(item.toJSON());
            }
        }
        return data;
    };
    return PatientSurveyPagedResponse;
}());
exports.PatientSurveyPagedResponse = PatientSurveyPagedResponse;
var PatientSurveyStatus = /** @class */ (function () {
    function PatientSurveyStatus(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PatientSurveyStatus.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : null;
            this.name = _data["name"] !== undefined ? _data["name"] : null;
            this.active = _data["active"] !== undefined ? _data["active"] : null;
        }
    };
    PatientSurveyStatus.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PatientSurveyStatus();
        result.init(data);
        return result;
    };
    PatientSurveyStatus.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["active"] = this.active !== undefined ? this.active : null;
        return data;
    };
    return PatientSurveyStatus;
}());
exports.PatientSurveyStatus = PatientSurveyStatus;
var Person = /** @class */ (function () {
    function Person(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Person.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : null;
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : null;
            this.emailAddress = _data["emailAddress"] !== undefined ? _data["emailAddress"] : null;
            this.location = _data["location"] ? Location.fromJS(_data["location"]) : null;
            this.middleName = _data["middleName"] !== undefined ? _data["middleName"] : null;
            this.address1 = _data["address1"] !== undefined ? _data["address1"] : null;
            this.address2 = _data["address2"] !== undefined ? _data["address2"] : null;
            this.title = _data["title"] !== undefined ? _data["title"] : null;
            this.suffix = _data["suffix"] !== undefined ? _data["suffix"] : null;
            this.cellPhone = _data["cellPhone"] !== undefined ? _data["cellPhone"] : null;
            this.homePhone = _data["homePhone"] !== undefined ? _data["homePhone"] : null;
            this.gender = _data["gender"] ? Gender.fromJS(_data["gender"]) : null;
            this.active = _data["active"] !== undefined ? _data["active"] : null;
            this.birthDate = _data["birthDate"] ? new Date(_data["birthDate"].toString()) : null;
            this.role = _data["role"] ? PersonRole.fromJS(_data["role"]) : null;
            this.auditInfo = _data["auditInfo"] ? AuditInfo.fromJS(_data["auditInfo"]) : null;
            if (Array.isArray(_data["roles"])) {
                this.roles = [];
                for (var _i = 0, _a = _data["roles"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.roles.push(PersonRole.fromJS(item));
                }
            }
            else {
                this.roles = null;
            }
            if (Array.isArray(_data["addresses"])) {
                this.addresses = [];
                for (var _b = 0, _c = _data["addresses"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.addresses.push(PersonAddress.fromJS(item));
                }
            }
            else {
                this.addresses = null;
            }
        }
    };
    Person.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Person();
        result.init(data);
        return result;
    };
    Person.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        data["location"] = this.location ? this.location.toJSON() : null;
        data["middleName"] = this.middleName !== undefined ? this.middleName : null;
        data["address1"] = this.address1 !== undefined ? this.address1 : null;
        data["address2"] = this.address2 !== undefined ? this.address2 : null;
        data["title"] = this.title !== undefined ? this.title : null;
        data["suffix"] = this.suffix !== undefined ? this.suffix : null;
        data["cellPhone"] = this.cellPhone !== undefined ? this.cellPhone : null;
        data["homePhone"] = this.homePhone !== undefined ? this.homePhone : null;
        data["gender"] = this.gender ? this.gender.toJSON() : null;
        data["active"] = this.active !== undefined ? this.active : null;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : null;
        data["role"] = this.role ? this.role.toJSON() : null;
        data["auditInfo"] = this.auditInfo ? this.auditInfo.toJSON() : null;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (var _i = 0, _a = this.roles; _i < _a.length; _i++) {
                var item = _a[_i];
                data["roles"].push(item.toJSON());
            }
        }
        if (Array.isArray(this.addresses)) {
            data["addresses"] = [];
            for (var _b = 0, _c = this.addresses; _b < _c.length; _b++) {
                var item = _c[_b];
                data["addresses"].push(item.toJSON());
            }
        }
        return data;
    };
    return Person;
}());
exports.Person = Person;
var PersonAddress = /** @class */ (function () {
    function PersonAddress(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PersonAddress.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : null;
            this.name = _data["name"] !== undefined ? _data["name"] : null;
            this.active = _data["active"] !== undefined ? _data["active"] : null;
            this.location = _data["location"] ? Location.fromJS(_data["location"]) : null;
            this.address1 = _data["address1"] !== undefined ? _data["address1"] : null;
            this.address2 = _data["address2"] !== undefined ? _data["address2"] : null;
            this.type = _data["type"] ? AddressType.fromJS(_data["type"]) : null;
            this.personId = _data["personId"] !== undefined ? _data["personId"] : null;
            this.auditInfo = _data["auditInfo"] ? AuditInfo.fromJS(_data["auditInfo"]) : null;
            this.phoneNumber = _data["phoneNumber"] !== undefined ? _data["phoneNumber"] : null;
        }
    };
    PersonAddress.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PersonAddress();
        result.init(data);
        return result;
    };
    PersonAddress.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["active"] = this.active !== undefined ? this.active : null;
        data["location"] = this.location ? this.location.toJSON() : null;
        data["address1"] = this.address1 !== undefined ? this.address1 : null;
        data["address2"] = this.address2 !== undefined ? this.address2 : null;
        data["type"] = this.type ? this.type.toJSON() : null;
        data["personId"] = this.personId !== undefined ? this.personId : null;
        data["auditInfo"] = this.auditInfo ? this.auditInfo.toJSON() : null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : null;
        return data;
    };
    return PersonAddress;
}());
exports.PersonAddress = PersonAddress;
var PersonAddressListResponse = /** @class */ (function () {
    function PersonAddressListResponse(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PersonAddressListResponse.prototype.init = function (_data) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : null;
            this.message = _data["message"] !== undefined ? _data["message"] : null;
            if (Array.isArray(_data["data"])) {
                this.data = [];
                for (var _i = 0, _a = _data["data"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.data.push(PersonAddress.fromJS(item));
                }
            }
            else {
                this.data = null;
            }
        }
    };
    PersonAddressListResponse.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PersonAddressListResponse();
        result.init(data);
        return result;
    };
    PersonAddressListResponse.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status !== undefined ? this.status : null;
        data["message"] = this.message !== undefined ? this.message : null;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (var _i = 0, _a = this.data; _i < _a.length; _i++) {
                var item = _a[_i];
                data["data"].push(item.toJSON());
            }
        }
        return data;
    };
    return PersonAddressListResponse;
}());
exports.PersonAddressListResponse = PersonAddressListResponse;
var PersonAddressResponse = /** @class */ (function () {
    function PersonAddressResponse(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PersonAddressResponse.prototype.init = function (_data) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : null;
            this.message = _data["message"] !== undefined ? _data["message"] : null;
            this.data = _data["data"] ? PersonAddress.fromJS(_data["data"]) : null;
        }
    };
    PersonAddressResponse.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PersonAddressResponse();
        result.init(data);
        return result;
    };
    PersonAddressResponse.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status !== undefined ? this.status : null;
        data["message"] = this.message !== undefined ? this.message : null;
        data["data"] = this.data ? this.data.toJSON() : null;
        return data;
    };
    return PersonAddressResponse;
}());
exports.PersonAddressResponse = PersonAddressResponse;
var PersonPagedResponse = /** @class */ (function () {
    function PersonPagedResponse(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PersonPagedResponse.prototype.init = function (_data) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : null;
            this.message = _data["message"] !== undefined ? _data["message"] : null;
            this.currentPage = _data["currentPage"] !== undefined ? _data["currentPage"] : null;
            this.pageCount = _data["pageCount"] !== undefined ? _data["pageCount"] : null;
            this.pageSize = _data["pageSize"] !== undefined ? _data["pageSize"] : null;
            this.rowCount = _data["rowCount"] !== undefined ? _data["rowCount"] : null;
            if (Array.isArray(_data["data"])) {
                this.data = [];
                for (var _i = 0, _a = _data["data"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.data.push(Person.fromJS(item));
                }
            }
            else {
                this.data = null;
            }
        }
    };
    PersonPagedResponse.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PersonPagedResponse();
        result.init(data);
        return result;
    };
    PersonPagedResponse.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status !== undefined ? this.status : null;
        data["message"] = this.message !== undefined ? this.message : null;
        data["currentPage"] = this.currentPage !== undefined ? this.currentPage : null;
        data["pageCount"] = this.pageCount !== undefined ? this.pageCount : null;
        data["pageSize"] = this.pageSize !== undefined ? this.pageSize : null;
        data["rowCount"] = this.rowCount !== undefined ? this.rowCount : null;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (var _i = 0, _a = this.data; _i < _a.length; _i++) {
                var item = _a[_i];
                data["data"].push(item.toJSON());
            }
        }
        return data;
    };
    return PersonPagedResponse;
}());
exports.PersonPagedResponse = PersonPagedResponse;
var PersonResponse = /** @class */ (function () {
    function PersonResponse(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PersonResponse.prototype.init = function (_data) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : null;
            this.message = _data["message"] !== undefined ? _data["message"] : null;
            this.data = _data["data"] ? Person.fromJS(_data["data"]) : null;
        }
    };
    PersonResponse.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PersonResponse();
        result.init(data);
        return result;
    };
    PersonResponse.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status !== undefined ? this.status : null;
        data["message"] = this.message !== undefined ? this.message : null;
        data["data"] = this.data ? this.data.toJSON() : null;
        return data;
    };
    return PersonResponse;
}());
exports.PersonResponse = PersonResponse;
var PersonRole = /** @class */ (function () {
    function PersonRole(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PersonRole.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : null;
            this.name = _data["name"] !== undefined ? _data["name"] : null;
            this.active = _data["active"] !== undefined ? _data["active"] : null;
        }
    };
    PersonRole.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PersonRole();
        result.init(data);
        return result;
    };
    PersonRole.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["active"] = this.active !== undefined ? this.active : null;
        return data;
    };
    return PersonRole;
}());
exports.PersonRole = PersonRole;
var PhoneNumber = /** @class */ (function () {
    function PhoneNumber(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PhoneNumber.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : null;
            this.active = _data["active"] !== undefined ? _data["active"] : null;
            this.type = _data["type"] ? PhoneNumberType.fromJS(_data["type"]) : null;
            this.phoneNumberValue = _data["phoneNumberValue"] !== undefined ? _data["phoneNumberValue"] : null;
            this.auditInfo = _data["auditInfo"] ? AuditInfo.fromJS(_data["auditInfo"]) : null;
        }
    };
    PhoneNumber.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PhoneNumber();
        result.init(data);
        return result;
    };
    PhoneNumber.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : null;
        data["active"] = this.active !== undefined ? this.active : null;
        data["type"] = this.type ? this.type.toJSON() : null;
        data["phoneNumberValue"] = this.phoneNumberValue !== undefined ? this.phoneNumberValue : null;
        data["auditInfo"] = this.auditInfo ? this.auditInfo.toJSON() : null;
        return data;
    };
    return PhoneNumber;
}());
exports.PhoneNumber = PhoneNumber;
var PhoneNumberListResponse = /** @class */ (function () {
    function PhoneNumberListResponse(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PhoneNumberListResponse.prototype.init = function (_data) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : null;
            this.message = _data["message"] !== undefined ? _data["message"] : null;
            if (Array.isArray(_data["data"])) {
                this.data = [];
                for (var _i = 0, _a = _data["data"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.data.push(PhoneNumber.fromJS(item));
                }
            }
            else {
                this.data = null;
            }
        }
    };
    PhoneNumberListResponse.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PhoneNumberListResponse();
        result.init(data);
        return result;
    };
    PhoneNumberListResponse.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status !== undefined ? this.status : null;
        data["message"] = this.message !== undefined ? this.message : null;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (var _i = 0, _a = this.data; _i < _a.length; _i++) {
                var item = _a[_i];
                data["data"].push(item.toJSON());
            }
        }
        return data;
    };
    return PhoneNumberListResponse;
}());
exports.PhoneNumberListResponse = PhoneNumberListResponse;
var PhoneNumberType = /** @class */ (function () {
    function PhoneNumberType(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PhoneNumberType.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : null;
            this.name = _data["name"] !== undefined ? _data["name"] : null;
            this.active = _data["active"] !== undefined ? _data["active"] : null;
        }
    };
    PhoneNumberType.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PhoneNumberType();
        result.init(data);
        return result;
    };
    PhoneNumberType.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["active"] = this.active !== undefined ? this.active : null;
        return data;
    };
    return PhoneNumberType;
}());
exports.PhoneNumberType = PhoneNumberType;
var Region = /** @class */ (function () {
    function Region(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Region.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : null;
            this.name = _data["name"] !== undefined ? _data["name"] : null;
            this.active = _data["active"] !== undefined ? _data["active"] : null;
            this.countryId = _data["countryId"] !== undefined ? _data["countryId"] : null;
        }
    };
    Region.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Region();
        result.init(data);
        return result;
    };
    Region.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["active"] = this.active !== undefined ? this.active : null;
        data["countryId"] = this.countryId !== undefined ? this.countryId : null;
        return data;
    };
    return Region;
}());
exports.Region = Region;
var RegionArrayResponse = /** @class */ (function () {
    function RegionArrayResponse(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RegionArrayResponse.prototype.init = function (_data) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : null;
            this.message = _data["message"] !== undefined ? _data["message"] : null;
            if (Array.isArray(_data["data"])) {
                this.data = [];
                for (var _i = 0, _a = _data["data"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.data.push(Region.fromJS(item));
                }
            }
            else {
                this.data = null;
            }
        }
    };
    RegionArrayResponse.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RegionArrayResponse();
        result.init(data);
        return result;
    };
    RegionArrayResponse.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status !== undefined ? this.status : null;
        data["message"] = this.message !== undefined ? this.message : null;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (var _i = 0, _a = this.data; _i < _a.length; _i++) {
                var item = _a[_i];
                data["data"].push(item.toJSON());
            }
        }
        return data;
    };
    return RegionArrayResponse;
}());
exports.RegionArrayResponse = RegionArrayResponse;
var Response = /** @class */ (function () {
    function Response(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Response.prototype.init = function (_data) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : null;
            this.message = _data["message"] !== undefined ? _data["message"] : null;
        }
    };
    Response.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Response();
        result.init(data);
        return result;
    };
    Response.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status !== undefined ? this.status : null;
        data["message"] = this.message !== undefined ? this.message : null;
        return data;
    };
    return Response;
}());
exports.Response = Response;
var StringResponse = /** @class */ (function () {
    function StringResponse(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    StringResponse.prototype.init = function (_data) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : null;
            this.message = _data["message"] !== undefined ? _data["message"] : null;
            this.data = _data["data"] !== undefined ? _data["data"] : null;
        }
    };
    StringResponse.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new StringResponse();
        result.init(data);
        return result;
    };
    StringResponse.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status !== undefined ? this.status : null;
        data["message"] = this.message !== undefined ? this.message : null;
        data["data"] = this.data !== undefined ? this.data : null;
        return data;
    };
    return StringResponse;
}());
exports.StringResponse = StringResponse;
var StringStringKeyValuePair = /** @class */ (function () {
    function StringStringKeyValuePair(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    StringStringKeyValuePair.prototype.init = function (_data) {
        if (_data) {
            this.key = _data["key"] !== undefined ? _data["key"] : null;
            this.value = _data["value"] !== undefined ? _data["value"] : null;
        }
    };
    StringStringKeyValuePair.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new StringStringKeyValuePair();
        result.init(data);
        return result;
    };
    StringStringKeyValuePair.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key !== undefined ? this.key : null;
        data["value"] = this.value !== undefined ? this.value : null;
        return data;
    };
    return StringStringKeyValuePair;
}());
exports.StringStringKeyValuePair = StringStringKeyValuePair;
var StringStringKeyValuePairListResponse = /** @class */ (function () {
    function StringStringKeyValuePairListResponse(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    StringStringKeyValuePairListResponse.prototype.init = function (_data) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : null;
            this.message = _data["message"] !== undefined ? _data["message"] : null;
            if (Array.isArray(_data["data"])) {
                this.data = [];
                for (var _i = 0, _a = _data["data"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.data.push(StringStringKeyValuePair.fromJS(item));
                }
            }
            else {
                this.data = null;
            }
        }
    };
    StringStringKeyValuePairListResponse.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new StringStringKeyValuePairListResponse();
        result.init(data);
        return result;
    };
    StringStringKeyValuePairListResponse.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status !== undefined ? this.status : null;
        data["message"] = this.message !== undefined ? this.message : null;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (var _i = 0, _a = this.data; _i < _a.length; _i++) {
                var item = _a[_i];
                data["data"].push(item.toJSON());
            }
        }
        return data;
    };
    return StringStringKeyValuePairListResponse;
}());
exports.StringStringKeyValuePairListResponse = StringStringKeyValuePairListResponse;
var Visit = /** @class */ (function () {
    function Visit(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Visit.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : null;
            this.name = _data["name"] !== undefined ? _data["name"] : null;
            this.visitTypeId = _data["visitTypeId"] !== undefined ? _data["visitTypeId"] : null;
            this.visitDate = _data["visitDate"] ? new Date(_data["visitDate"].toString()) : null;
            this.foodMedicationAllergies = _data["foodMedicationAllergies"] !== undefined ? _data["foodMedicationAllergies"] : null;
            this.typeOfAllergies = _data["typeOfAllergies"] !== undefined ? _data["typeOfAllergies"] : null;
            this.smokes = _data["smokes"] !== undefined ? _data["smokes"] : null;
            this.smokesPacksPerDay = _data["smokesPacksPerDay"] !== undefined ? _data["smokesPacksPerDay"] : null;
            this.drinksAlcohol = _data["drinksAlcohol"] !== undefined ? _data["drinksAlcohol"] : null;
            this.alcoholPerDay = _data["alcoholPerDay"] !== undefined ? _data["alcoholPerDay"] : null;
            this.medications = _data["medications"] !== undefined ? _data["medications"] : null;
            this.lastFluShotDate = _data["lastFluShotDate"] ? new Date(_data["lastFluShotDate"].toString()) : null;
            this.lastPneumoShotDate = _data["lastPneumoShotDate"] ? new Date(_data["lastPneumoShotDate"].toString()) : null;
            this.additionalInfo = _data["additionalInfo"] !== undefined ? _data["additionalInfo"] : null;
            this.visitType = _data["visitType"] ? VisitType.fromJS(_data["visitType"]) : null;
            this.patientId = _data["patientId"] !== undefined ? _data["patientId"] : null;
        }
    };
    Visit.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Visit();
        result.init(data);
        return result;
    };
    Visit.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["visitTypeId"] = this.visitTypeId !== undefined ? this.visitTypeId : null;
        data["visitDate"] = this.visitDate ? this.visitDate.toISOString() : null;
        data["foodMedicationAllergies"] = this.foodMedicationAllergies !== undefined ? this.foodMedicationAllergies : null;
        data["typeOfAllergies"] = this.typeOfAllergies !== undefined ? this.typeOfAllergies : null;
        data["smokes"] = this.smokes !== undefined ? this.smokes : null;
        data["smokesPacksPerDay"] = this.smokesPacksPerDay !== undefined ? this.smokesPacksPerDay : null;
        data["drinksAlcohol"] = this.drinksAlcohol !== undefined ? this.drinksAlcohol : null;
        data["alcoholPerDay"] = this.alcoholPerDay !== undefined ? this.alcoholPerDay : null;
        data["medications"] = this.medications !== undefined ? this.medications : null;
        data["lastFluShotDate"] = this.lastFluShotDate ? this.lastFluShotDate.toISOString() : null;
        data["lastPneumoShotDate"] = this.lastPneumoShotDate ? this.lastPneumoShotDate.toISOString() : null;
        data["additionalInfo"] = this.additionalInfo !== undefined ? this.additionalInfo : null;
        data["visitType"] = this.visitType ? this.visitType.toJSON() : null;
        data["patientId"] = this.patientId !== undefined ? this.patientId : null;
        return data;
    };
    return Visit;
}());
exports.Visit = Visit;
var VisitPagedResponse = /** @class */ (function () {
    function VisitPagedResponse(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    VisitPagedResponse.prototype.init = function (_data) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : null;
            this.message = _data["message"] !== undefined ? _data["message"] : null;
            this.currentPage = _data["currentPage"] !== undefined ? _data["currentPage"] : null;
            this.pageCount = _data["pageCount"] !== undefined ? _data["pageCount"] : null;
            this.pageSize = _data["pageSize"] !== undefined ? _data["pageSize"] : null;
            this.rowCount = _data["rowCount"] !== undefined ? _data["rowCount"] : null;
            if (Array.isArray(_data["data"])) {
                this.data = [];
                for (var _i = 0, _a = _data["data"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.data.push(Visit.fromJS(item));
                }
            }
            else {
                this.data = null;
            }
        }
    };
    VisitPagedResponse.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new VisitPagedResponse();
        result.init(data);
        return result;
    };
    VisitPagedResponse.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status !== undefined ? this.status : null;
        data["message"] = this.message !== undefined ? this.message : null;
        data["currentPage"] = this.currentPage !== undefined ? this.currentPage : null;
        data["pageCount"] = this.pageCount !== undefined ? this.pageCount : null;
        data["pageSize"] = this.pageSize !== undefined ? this.pageSize : null;
        data["rowCount"] = this.rowCount !== undefined ? this.rowCount : null;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (var _i = 0, _a = this.data; _i < _a.length; _i++) {
                var item = _a[_i];
                data["data"].push(item.toJSON());
            }
        }
        return data;
    };
    return VisitPagedResponse;
}());
exports.VisitPagedResponse = VisitPagedResponse;
var VisitResponse = /** @class */ (function () {
    function VisitResponse(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    VisitResponse.prototype.init = function (_data) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : null;
            this.message = _data["message"] !== undefined ? _data["message"] : null;
            this.data = _data["data"] ? Visit.fromJS(_data["data"]) : null;
        }
    };
    VisitResponse.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new VisitResponse();
        result.init(data);
        return result;
    };
    VisitResponse.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status !== undefined ? this.status : null;
        data["message"] = this.message !== undefined ? this.message : null;
        data["data"] = this.data ? this.data.toJSON() : null;
        return data;
    };
    return VisitResponse;
}());
exports.VisitResponse = VisitResponse;
var VisitType = /** @class */ (function () {
    function VisitType(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    VisitType.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : null;
            this.name = _data["name"] !== undefined ? _data["name"] : null;
            this.active = _data["active"] !== undefined ? _data["active"] : null;
        }
    };
    VisitType.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new VisitType();
        result.init(data);
        return result;
    };
    VisitType.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["active"] = this.active !== undefined ? this.active : null;
        return data;
    };
    return VisitType;
}());
exports.VisitType = VisitType;
var VisitTypeArrayResponse = /** @class */ (function () {
    function VisitTypeArrayResponse(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    VisitTypeArrayResponse.prototype.init = function (_data) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : null;
            this.message = _data["message"] !== undefined ? _data["message"] : null;
            if (Array.isArray(_data["data"])) {
                this.data = [];
                for (var _i = 0, _a = _data["data"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.data.push(VisitType.fromJS(item));
                }
            }
            else {
                this.data = null;
            }
        }
    };
    VisitTypeArrayResponse.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new VisitTypeArrayResponse();
        result.init(data);
        return result;
    };
    VisitTypeArrayResponse.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status !== undefined ? this.status : null;
        data["message"] = this.message !== undefined ? this.message : null;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (var _i = 0, _a = this.data; _i < _a.length; _i++) {
                var item = _a[_i];
                data["data"].push(item.toJSON());
            }
        }
        return data;
    };
    return VisitTypeArrayResponse;
}());
exports.VisitTypeArrayResponse = VisitTypeArrayResponse;
var WeatherForecast = /** @class */ (function () {
    function WeatherForecast(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    WeatherForecast.prototype.init = function (_data) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : null;
            this.temperatureC = _data["temperatureC"] !== undefined ? _data["temperatureC"] : null;
            this.temperatureF = _data["temperatureF"] !== undefined ? _data["temperatureF"] : null;
            this.summary = _data["summary"] !== undefined ? _data["summary"] : null;
        }
    };
    WeatherForecast.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new WeatherForecast();
        result.init(data);
        return result;
    };
    WeatherForecast.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : null;
        data["temperatureC"] = this.temperatureC !== undefined ? this.temperatureC : null;
        data["temperatureF"] = this.temperatureF !== undefined ? this.temperatureF : null;
        data["summary"] = this.summary !== undefined ? this.summary : null;
        return data;
    };
    return WeatherForecast;
}());
exports.WeatherForecast = WeatherForecast;
var ApiException = /** @class */ (function (_super) {
    __extends(ApiException, _super);
    function ApiException(message, status, response, headers, result) {
        var _this = _super.call(this) || this;
        _this.isApiException = true;
        _this.message = message;
        _this.status = status;
        _this.response = response;
        _this.headers = headers;
        _this.result = result;
        return _this;
    }
    ApiException.isApiException = function (obj) {
        return obj.isApiException === true;
    };
    return ApiException;
}(Error));
exports.ApiException = ApiException;
function throwException(message, status, response, headers, result) {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}
function isAxiosError(obj) {
    return obj && obj.isAxiosError === true;
}
